name: test-par-unit-build

on:
  workflow_call:

##########################
# Unit tests MFEM Parallel
jobs:
  build-par-unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, ubsan]

    name: ${{matrix.sanitizer}}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/sanitize/env
      
      - name: Restore
        id: restore
        uses: ./.github/actions/sanitize/restore
        with:
          cache-path: mfem/build/tests/unit/punit_tests
          cache-key: unit-par-${{matrix.sanitizer}}
          artifact-name: mfem-par-${{matrix.sanitizer}}
          par: true

      # - name: Cache
      #   if: ${{ env.DEBUG == 'true' }}
      #   id: cache
      #   uses: actions/cache@v4
      #   with:
      #     path: mfem/build/tests/unit/punit_tests
      #     key: cache-unit-par-${{matrix.sanitizer}}
      # - name: Restore LLVM libcxx
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{env.LLVM_DIR}}
      #     fail-on-cache-miss: true
      #     key: cache-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      # - name: Restore Hypre
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{env.HYPRE_DIR}}
      #     fail-on-cache-miss: true
      #     key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      # - name: Restore Metis
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{env.METIS_DIR}}
      #     fail-on-cache-miss: true
      #     key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      # - name: Restore LSAN
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{env.LSAN_DIR}}
      #     fail-on-cache-miss: true
      #     key: cache-lsan-suppression-file
      # - name: Hypre/Metis links
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   run: ln -s -f ${{env.HYPRE_DIR}} hypre && ln -s -f ${{env.METIS_DIR}} metis-4.0
      # - name: Checkout
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   uses: actions/checkout@v4
      #   with:
      #     path: mfem
      #     ref: ubsan
      #     repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      # - name: Download MFEM
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: upload-mfem-par-${{matrix.sanitizer}}
      #     path: mfem/build
      # - name: Ninja Patch
      #   if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      #   working-directory: mfem/build
      #   run: sed -i -e 's/CXX_STATIC_LIBRARY_LINKER__mfem_Release.*/CUSTOM_COMMAND/' build.ninja

      - name: Build Unit Tests
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v punit_tests

      - name: Delete object files
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build/tests/unit
        run: find . -type f -name '*.o' -delete

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-unit-par-${{matrix.sanitizer}}
          path: mfem/build/tests/unit/punit_tests
          if-no-files-found: error
          retention-days: 1
          overwrite: false