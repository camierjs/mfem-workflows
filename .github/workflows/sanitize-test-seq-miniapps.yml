name: test-seq-miniapps

on:
  workflow_call:
    inputs:
      DEBUG:
        type: string
        default: 'true'
        required: false
      LSAN_DIR:
        description: 'LSAN suppression directory'
        required: false
        type: string
        default: 'lsan'
      LSAN_FILE:
        description: 'LSAN suppression file'
        required: false
        type: string
        default: 'lsan.supp'

######################
# Miniapps MFEM Serial
# Cache:   cache-miniapps-seq-${{matrix.sanitizer}}
# Upload: upload-miniapps-seq-${{matrix.sanitizer}}
jobs:
  test-seq-miniapps:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
    name: ${{matrix.sanitizer}}
    env:
      DEBUG: ${{inputs.DEBUG}}
      LSAN_DIR: ${{inputs.LSAN_DIR}}
      LSAN_FILE: ${{inputs.LSAN_FILE}}
    steps:
      - name: Cache
        if: ${{ env.DEBUG == 'true' }}
        id: cache
        uses: actions/cache@v4
        with:
          path: mfem/build/miniapps/meshing/minimal-surface
          key: cache-miniapps-seq-${{matrix.sanitizer}}
      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Restore LLVM libcxx
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: cache-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore LSAN file
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Checkout
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Download MFEM
        uses: actions/download-artifact@v4
        with:
          name: upload-mfem-seq-${{matrix.sanitizer}}
          path: mfem/build
      - name: Ninja Patch
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: sed -i -e 's/CXX_STATIC_LIBRARY_LINKER__mfem_Release.*/CUSTOM_COMMAND/' build.ninja
      - name: Build Miniapps
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v miniapps
      - name: Test Miniapps
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ${{env.CTEST}} miniapps