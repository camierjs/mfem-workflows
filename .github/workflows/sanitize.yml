name: Sanitize

on:
  workflow_call:
    inputs:
      par:
        description: 'Whether to build for parallel (true/false)'
        required: false
        default: false
        type: boolean
      sanitizer:
        description: 'Sanitizer to use (asan, msan, ubsan)'
        required: true
        default: asan
        type: string

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/mfem
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}

  check:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      ex: ${{ inputs.par && 'ex1p' || 'ex1' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: check
        uses: ./.github/actions/sanitize/restore
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: check-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/examples/${{env.ex}}
      - name: MFEM Check
        if: ${{ steps.check.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v check

  # ğŸ”¥ğŸ”¥ğŸ”¥ Could we compile only the parallel examples when parallel?
  examples:
    needs: [check]
    runs-on: ubuntu-latest
    env:
      exclude: ${{ inputs.par && '-E "_ser"' || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: examples
        uses: ./.github/actions/sanitize/restore
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: examples-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/examples/ex1
      - name: Build Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v examples
      - name: Test Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: |
          ${{env.CTEST}} examples ${{env.exclude}} --show-only
          ${{env.CTEST}} examples ${{env.exclude}}

  # ğŸ”¥ğŸ”¥ğŸ”¥ Could we compile only the parallel miniapps when parallel?
  miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    env:
      exclude: ${{ inputs.par && '-E "_ser"' || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: miniapps
        uses: ./.github/actions/sanitize/restore
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: miniapps-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/miniapps/meshing/minimal-surface
      - name: Build Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v miniapps
      - name: Test Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: |
          ${{env.CTEST}} miniapps ${{env.exclude}} --show-only
          ${{env.CTEST}} miniapps ${{env.exclude}}

  tests-miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    env:
      exclude: ${{ inputs.par && '"unit_tests|debug"' || '"^unit_tests$|debug"' }}
      run: ${{ inputs.par && '-R "_cpu_np"' || '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        id: tests-miniapps
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: tests-miniapps-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/tests/unit/sedov_tests_cpu
      - name: Build Tests Unit Miniapps
        if: ${{ steps.tests-miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v tests/unit/all
      - name: Run Tests Unit Miniapps
        if: ${{ steps.tests-miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: |
          ${{env.CTEST}} tests/unit -E ${{env.exclude}} ${{env.run}} --show-only
          ${{env.CTEST}} tests/unit -E ${{env.exclude}} ${{env.run}}

  tests-unit-build:
    needs: [check]
    runs-on: ubuntu-latest
    env:
      unit_tests: ${{ inputs.par && 'punit_tests' || 'unit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: restore
        uses: ./.github/actions/sanitize/restore
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: tests-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/tests/unit/${{env.unit_tests}}
      - name: Build Unit Tests
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v ${{env.unit_tests}}
      - name: Delete object files
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build/tests/unit
        run: find . -type f -name '*.o' -delete
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{inputs.par}}-${{inputs.sanitizer}}
          path: mfem/build/tests/unit/${{env.unit_tests}}
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  # ğŸ”¥ğŸ”¥ğŸ”¥ Could filter 'punit_tests_np=2' only in parallel?
  tests-unit-run:
    needs: [tests-unit-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [0, 1, 2, 3]
    name: tests-unit-run-${{matrix.tag}}
    env:
      unit_tests: ${{ inputs.par && 'punit_tests' || 'unit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        id: tests-runs
        with:
          par: ${{inputs.par}}
          sanitizer: ${{inputs.sanitizer}}
          cache-key: tests-runs-${{inputs.par}}-${{inputs.sanitizer}}
          cache-path: mfem/build/tests/unit/${{env.unit_tests}}
      - name: Restore Unit Tests
        if: ${{ steps.tests-runs.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: tests-${{inputs.par}}-${{inputs.sanitizer}}
          path: mfem/build/tests/unit
      - name: Split Unit Tests
        if: ${{ steps.tests-runs.outputs.cache-hit != 'true' }}
        working-directory: mfem/build/tests/unit
        run: |
          chmod 755 ${{env.unit_tests}}
          ./${{env.unit_tests}} --list-test-names-only | tail -n +2 > list-test-names
          shuf list-test-names -o list-test-names
          split --verbose -n l/4 -d -a 1 list-test-names list-test-names-
      - name: Run Unit Tests ${{matrix.tag}}
        if: ${{ steps.tests-runs.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: |
          ${{env.CTEST}} tests/unit -R "${{env.unit_tests}}" --show-only
          ${{env.CTEST}} tests/unit -R "${{env.unit_tests}}"

