---
name: "Sanitizers"

permissions:
  actions: write

on:
  # Run on pushes to main development branches
  push:
    branches: ["main"]
  # Run on all pull requests
  pull_request:
  # Allow manual triggering for debugging
  workflow_dispatch:

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

env:
  CLANG_VER: 18
  LLVM_VER: 19.1.7    # https://github.com/llvm/llvm-project/releases
  HYPRE_VER: 2.19.0   # https://github.com/hypre-space/hypre/releases
  METIS_VER: 4.0.3
  # https://clang.llvm.org/docs/AddressSanitizer.html
  ASAN_OPTIONS: "detect_leaks=1,
                 strict_init_order=1,
                 strict_string_checks=1,
                 check_initialization_order=1,
                 detect_stack_use_after_return=1"
  # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
  UBSAN_OPTIONS: "halt_on_error=1, print_stacktrace=1"
  # https://clang.llvm.org/docs/MemorySanitizer.html
  MSAN_OPTIONS: "poison_in_dtor=1"
  LSAN_DIR: lsan
  LSAN_FILE: lsan.supp

jobs:
  #############
  # Build HYPRE
  build-hypre:
    runs-on: ubuntu-latest
    name: build-hypre
    steps:
      - name: Env
        run: |
          echo "HYPRE_DIR=hypre-${{env.HYPRE_VER}}" >> $GITHUB_ENV
          echo "HYPRE_TGZ=v${{env.HYPRE_VER}}.tar.gz" >> $GITHUB_ENV
      - name: Cache
        id: hypre-cache
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      - name: Setup
        if: steps.hypre-cache.outputs.cache-hit != 'true'
        run: sudo apt-get install openmpi-bin libopenmpi-dev
      - name: Build
        if: steps.hypre-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-hypre@v2.5
        with:
          archive: ${{env.HYPRE_TGZ}}
          dir: ${{env.HYPRE_DIR}}
          target: int32
          precision: fp64
          build-system: make

  #############
  # Build METIS
  build-metis:
    runs-on: ubuntu-latest
    name: build-metis
    steps:
      - name: Env
        run: |
          echo "METIS_DIR=metis-${{env.METIS_VER}}" >> $GITHUB_ENV
          echo "METIS_TGZ=metis-${{env.METIS_VER}}.tar.gz" >> $GITHUB_ENV
      - name: Cache
        id: metis-cache
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      - name: Setup
        if: steps.metis-cache.outputs.cache-hit != 'true'
        run: sudo apt-get install openmpi-bin libopenmpi-dev
      - name: Build
        if: steps.metis-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-metis@v2.5
        with:
          archive: ${{env.METIS_TGZ}}
          dir: ${{env.METIS_DIR}}

  #######################
  # LSAN suppression file
  # strdup required for Hypre 2.19.0
  build-file-lsan:
    runs-on: ubuntu-latest
    name: build-file-lsan
    steps:
      - name: Cache
        id: lsan-cache
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          key: cache-lsan-suppression-file
      - name: Setup
        if: steps.lsan-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{env.LSAN_DIR}}
          cat << EOF > ${{env.LSAN_DIR}}/${{env.LSAN_FILE}}
          leak:libevent_core-2.1.so
          leak:ompi_mpi_finalize
          leak:ompi_mpi_init
          leak:PMPI_Init
          leak:strdup
          EOF

  #############
  # LLVM libcxx
  # https://github.com/llvm/llvm-project/tree/main/libcxx
  build-llvm-libcxx:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
        include:
          - sanitizer: asan
            llvm_use_sanitizer: "Address"
          - sanitizer: msan
            llvm_use_sanitizer: "MemoryWithOrigins"
          - sanitizer: ubsan
            llvm_use_sanitizer: "Undefined"
    name: build-libcxx-${{matrix.sanitizer}}
    steps:
      - name: Env
        run: |
          echo "CC=clang-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "LLVM_DIR=${GITHUB_WORKSPACE}/llvm" >> $GITHUB_ENV
      - name: Cache
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          key: cache-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Clone
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: >
          git clone --filter=blob:none --depth=1
          --branch llvmorg-${{env.LLVM_VER}}
          --no-checkout https://github.com/llvm/llvm-project.git llvm-project
      - name: Checkout
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        working-directory: llvm-project
        run: |
          git sparse-checkout set --cone
          git checkout llvmorg-${{env.LLVM_VER}}
          git sparse-checkout set cmake llvm/cmake runtimes libcxx libcxxabi
      - name: Mkdir
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: mkdir ${{env.LLVM_DIR}}
      - name: CMake
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: >
          VERBOSE=1
          cmake -GNinja ../llvm-project/runtimes/
          -DCMAKE_C_COMPILER=${{env.CC}}
          -DCMAKE_CXX_COMPILER=${{env.CXX}}
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_INSTALL_PREFIX=/usr
          -DLLVM_USE_SANITIZER=${{matrix.llvm_use_sanitizer}}
          -DLLVM_BUILD_32_BITS=OFF
          -DLIBCXXABI_USE_LLVM_UNWINDER=OFF
          -DLLVM_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_BENCHMARKS=OFF
          -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi'
      - name: Build
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: cmake --build . -- cxx cxxabi

  ###################
  # Build MFEM Serial
  build-seq-mfem:
    needs: [build-llvm-libcxx]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
        include:
          - sanitizer: asan
            cxxflags: "-fsanitize=address -fsanitize-address-use-after-scope"
            ldflags: "-fsanitize=address"
          - sanitizer: msan
            cxxflags: "-fsanitize=memory -fsanitize-memory-track-origins -fsanitize-memory-use-after-dtor"
            ldflags: "-fsanitize=memory"
          - sanitizer: ubsan
            cxxflags: "-fsanitize=undefined"
            ldflags: "-fsanitize=undefined"
    name: build-seq-mfem-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: cache-mfem
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-mfem-seq-${{matrix.sanitizer}}
      - name: Env
        run: echo "LLVM_DIR=${GITHUB_WORKSPACE}/llvm" >> $GITHUB_ENV
      - name: Restore LLVM libcxx
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          key: llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Setup
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        run: |
          echo "CC=clang-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "LLVM_INC=${LLVM_DIR}/include/c++/v1" >> $GITHUB_ENV
          echo "LLVM_LIB=${LLVM_DIR}/lib" >> $GITHUB_ENV
          echo "CTEST=ctest -j --test-load $(nproc) --stop-on-failure --schedule-random --output-on-failure --test-dir" >> $GITHUB_ENV
      - name: Setup (LLVM)
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        run: |
          echo "LLVM_CXXFLAGS=-stdlib=libc++ -I${{env.LLVM_INC}} -Isystem${{env.LLVM_INC}}" >> $GITHUB_ENV
          echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Echo
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        run: |
          echo "[CC] ${{env.CC}}"
          echo "[CXX] ${{env.CXX}}"
          echo "[LLVM_DIR] ${{env.LLVM_DIR}}"
          echo "[LLVM_INC] ${{env.LLVM_INC}}"
          echo "[LLVM_LIB] ${{env.LLVM_LIB}}"
          echo "[LLVM_CXXFLAGS] ${{env.LLVM_CXXFLAGS}}"
          echo "[LLVM_LDFLAGS] ${{env.LLVM_LDFLAGS}}"
          echo "[CTEST] ${{env.CTEST}}"
      - name: Checkout
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-mfem@v2.5
        with:
          mpi: seq
          mfem-dir: mfem
          hypre-dir: unused
          metis-dir: unused
          os: ${{runner.os}}
          library-only: true
          build-system: cmake
          config-options: >-
            -GNinja
            -DMPICXX=${{env.CXX}}
            -DCMAKE_CXX_STANDARD=17
            -DMFEM_USE_MEMALLOC=OFF
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/mfem-install
            -DCMAKE_CXX_COMPILER=${{env.CXX}}
            -DCMAKE_CXX_FLAGS_RELEASE='-g -O1 -fno-omit-frame-pointer ${{matrix.cxxflags}} ${{env.LLVM_CXXFLAGS}}'
      - name: Install
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        working-directory: mfem/build
        run: ninja install
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-mfem-seq-${{matrix.sanitizer}}
          path: ${GITHUB_WORKSPACE}/mfem-install
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  #####################
  # Build MFEM Parallel
  build-par-mfem:
    needs: [build-llvm-libcxx, build-hypre, build-metis]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, ubsan]
        include:
          - sanitizer: asan
            cxxflags: "-fsanitize=address -fsanitize-address-use-after-scope"
            ldflags: "-fsanitize=address"
          - sanitizer: ubsan
            cxxflags: "-fsanitize=undefined"
            ldflags: "-fsanitize=undefined"
    name: build-par-mfem-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: cache-mfem
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-mfem-par-${{matrix.sanitizer}}
      - name: Env
        run: echo "LLVM_DIR=${GITHUB_WORKSPACE}/llvm" >> $GITHUB_ENV
      - name: Restore LLVM libcxx
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Setup
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo CC=clang-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo CXX=clang++-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo LLVM_INC=${LLVM_DIR}/include/c++/v1 >> $GITHUB_ENV
          echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
          echo HYPRE_DIR=hypre-${{env.HYPRE_VER}} >> $GITHUB_ENV
          echo METIS_DIR=metis-${{env.METIS_VER}} >> $GITHUB_ENV
          echo "CTEST=ctest -j --test-load $(nproc) --stop-on-failure --schedule-random --output-on-failure --test-dir" >> $GITHUB_ENV
          echo "PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe" >> $GITHUB_ENV
          echo "MPI_INC=$(mpicxx --showme:compile)" >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
      - name: Setup (LLVM)
        if: steps.cache-mfem-outputs.cache-hit != 'true'
        run: |
          echo "LLVM_CXXFLAGS=-stdlib=libc++ -I${{env.LLVM_INC}} -Isystem${{env.LLVM_INC}}" >> $GITHUB_ENV
          echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Echo
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        run: |
          echo "[CC] ${{env.CC}}"
          echo "[CXX] ${{env.CXX}}"
          echo "[LLVM_DIR] ${{env.LLVM_DIR}}"
          echo "[LLVM_INC] ${{env.LLVM_INC}}"
          echo "[LLVM_LIB] ${{env.LLVM_LIB}}"
          echo "[LLVM_CXXFLAGS] ${{env.LLVM_CXXFLAGS}}"
          echo "[LLVM_LDFLAGS] ${{env.LLVM_LDFLAGS}}"
          echo "[HYPRE_DIR] ${{env.HYPRE_DIR}}"
          echo "[METIS_DIR] ${{env.METIS_DIR}}"
          echo "[MPI] Version: $(mpicxx --showme:version)"
          echo "[MPI] Compile: $(mpicxx --showme:compile)"
          echo "[MPI] Link: $(mpicxx --showme:link)"
          echo "[CTEST] ${{env.CTEST}}"
      - name: Restore Hypre
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      - name: Restore Metis
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      - name: Checkout
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-mfem@v2.5
        with:
          mpi: par
          mfem-dir: mfem
          os: ${{runner.os}}
          library-only: true
          build-system: cmake
          hypre-dir: ${{env.HYPRE_DIR}}
          metis-dir: ${{env.METIS_DIR}}
          config-options: >-
            -GNinja
            -DMPICXX=${{env.CXX}}
            -DCMAKE_CXX_STANDARD=17
            -DMFEM_USE_MEMALLOC=OFF
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCMAKE_CXX_COMPILER=${{env.CXX}}
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/mfem-install
            -DCMAKE_CXX_FLAGS_RELEASE='-g -O1 -fno-omit-frame-pointer ${{matrix.cxxflags}} ${{env.LLVM_CXXFLAGS}} ${{env.MPI_INC}}'
      - name: Install
        if: steps.cache-mfem.outputs.cache-hit != 'true'
        working-directory: mfem/build
        run: ninja install
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-mfem-par-${{matrix.sanitizer}}
          path: ${GITHUB_WORKSPACE}/mfem-install
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  ###################
  # Check MFEM Serial
  test-seq-check:
    needs: [build-file-lsan, build-seq-mfem]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
    name: test-seq-check-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: check-seq-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-test-seq-check-${{matrix.sanitizer}}
      - name: Setup
        run: |
          echo CC=clang-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo CXX=clang++-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Setup (LLVM_LIB)
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-seq-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        run: |
          sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS)/' mfem-install/share/mfem/config.mk
      - name: Cat config.mk
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        run: cat mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore LSAN file
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Checkout
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: MFEM Check
        if: steps.check-seq-cache.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make ex1-test-seq
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-check-seq-${{matrix.sanitizer}}
          path: mfem/examples/ex1
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  # Check MFEM Parallel with Sanitizers
  test-par-check:
    needs: [build-file-lsan, build-par-mfem]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, ubsan]
    name: test-par-check-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: check-par-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-test-par-check-${{matrix.sanitizer}}
      - name: Setup
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo CC=clang-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo CXX=clang++-${{env.CLANG_VER}} >> $GITHUB_ENV
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo HYPRE_DIR=hypre-${{env.HYPRE_VER}} >> $GITHUB_ENV
          echo METIS_DIR=metis-${{env.METIS_VER}} >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Echo
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: |
          echo "[CC] ${{env.CC}}"
          echo "[CXX] ${{env.CXX}}"
          echo "[LLVM_DIR] ${{env.LLVM_DIR}}"
          echo "[HYPRE_DIR] ${{env.HYPRE_DIR}}"
          echo "[METIS_DIR] ${{env.METIS_DIR}}"
          echo "[MPI] MPI_LIB: ${{env.MPI_LIB}}"
      - name: Setup (LLVM_LIB)
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-par-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS) $(MPI_LIB)/' mfem-install/share/mfem/config.mk
      - name: Cat config.mk
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: cat mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore Hypre
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      - name: Restore Metis
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      - name: Restore LSAN
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Hypre/Metis links
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        run: ln -s -f ${{env.HYPRE_DIR}} hypre && ln -s -f ${{env.METIS_DIR}} metis-4.0
      - name: Checkout
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: MFEM Check
        if: steps.check-par-cache.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make ex1p-test-par
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-test-par-check-${{matrix.sanitizer}}
          path: mfem/examples/ex1p
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  ######################
  # Examples MFEM Serial
  test-seq-examples:
    needs: [test-seq-check]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
    name: test-seq-examples-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: cache-seq-examples
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-seq-examples-${{matrix.sanitizer}}
      - name: Setup
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        run: |
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Setup (LLVM_LIB)
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-seq-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        run: sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS)/' mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore LSAN file
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Checkout
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build Examples
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make all -j $(nproc)
      - name: Test Examples
        if: steps.cache-seq-examples.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make test-ser
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-seq-examples-${{matrix.sanitizer}}
          path: mfem/examples
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  ########################
  # Examples MFEM Parallel
  test-par-examples:
    needs: [test-par-check]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, ubsan]
    name: test-par-examples-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: examples-par-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-examples-par-cache-${{matrix.sanitizer}}
      - name: Setup
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo HYPRE_DIR=hypre-${{env.HYPRE_VER}} >> $GITHUB_ENV
          echo METIS_DIR=metis-${{env.METIS_VER}} >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Setup (LLVM_LIB)
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-par-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS) $(MPI_LIB)/' mfem-install/share/mfem/config.mk
      - name: Cat config.mk
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: cat mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore Hypre
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      - name: Restore Metis
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      - name: Restore LSAN
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Hypre/Metis links
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        run: ln -s -f ${{env.HYPRE_DIR}} hypre && ln -s -f ${{env.METIS_DIR}} metis-4.0
      - name: Checkout
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build Examples
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make all -j $(nproc)
      - name: Test Examples
        if: steps.examples-par-cache.outputs.cache-hit != 'true'
        working-directory: mfem/examples
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make test-par
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-examples-par-${{matrix.sanitizer}}
          path: mfem/examples
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  ########################
  # Unit tests MFEM Serial
  test-seq-unit:
    needs: [test-seq-check]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, msan, ubsan]
    name: test-seq-unit-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: unit-seq-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-unit-seq-${{matrix.sanitizer}}
      - name: Setup
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        run: |
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Setup (LLVM_LIB)
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-seq-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        run: sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS)/' mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore LSAN file
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Checkout
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build Unit Tests
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        working-directory: mfem/tests/unit
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make all -j $(nproc)
      - name: Test Unit Tests
        if: steps.unit-seq-cache.outputs.cache-hit != 'true'
        working-directory: mfem/tests/unit
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make test-ser
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-unit-seq-${{matrix.sanitizer}}
          path: mfem/tests/unit/unit_tests
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  ##########################
  # Unit tests MFEM Parallel
  test-par-unit:
    needs: [test-par-check]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [asan, ubsan]
    name: test-par-unit-${{matrix.sanitizer}}
    steps:
      - name: Cache
        id: unit-par-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          key: cache-unit-par-${{matrix.sanitizer}}
      - name: Setup
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo LLVM_DIR=${GITHUB_WORKSPACE}/llvm >> $GITHUB_ENV
          echo HYPRE_DIR=hypre-${{env.HYPRE_VER}} >> $GITHUB_ENV
          echo METIS_DIR=metis-${{env.METIS_VER}} >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
          echo LSAN_OPTIONS="suppressions=${GITHUB_WORKSPACE}/${{env.LSAN_DIR}}/${{env.LSAN_FILE}}" >> $GITHUB_ENV
      - name: Setup (LLVM_LIB)
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: echo LLVM_LIB=${LLVM_DIR}/lib >> $GITHUB_ENV
      - name: Setup (LLVM_LDFLAGS)
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV
      - name: Restore MFEM
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        id: mfem-cache
        uses: actions/cache@v4
        with:
          path: mfem-install
          fail-on-cache-miss: true
          key: cache-build-par-mfem-${{matrix.sanitizer}}
      - name: Patch config.mk
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: sed -i -e '/^MFEM_LIBS/ s/$/ $(LLVM_LDFLAGS) $(MPI_LIB)/' mfem-install/share/mfem/config.mk
      - name: Cat config.mk
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: cat mfem-install/share/mfem/config.mk
      - name: Restore LLVM libcxx
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          fail-on-cache-miss: true
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
      - name: Restore Hypre
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
      - name: Restore Metis
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          fail-on-cache-miss: true
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5
      - name: Restore LSAN
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{env.LSAN_DIR}}
          fail-on-cache-miss: true
          key: cache-lsan-suppression-file
      - name: Hypre/Metis links
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        run: ln -s -f ${{env.HYPRE_DIR}} hypre && ln -s -f ${{env.METIS_DIR}} metis-4.0
      - name: Checkout
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mfem
          ref: ubsan
          repository: mfem/mfem  # ðŸ”¥ðŸ”¥ðŸ”¥ Using MFEM/ubsan repository
      - name: Build Unit Tests
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        working-directory: mfem/tests/unit
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make all -j $(nproc)
      - name: Test Unit Tests
        if: steps.unit-par-cache.outputs.cache-hit != 'true'
        working-directory: mfem/tests/unit
        run: MFEM_INSTALL_DIR=${GITHUB_WORKSPACE}/mfem-install make test-par
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: upload-unit-par-${{matrix.sanitizer}}
          path: mfem/tests/unit/punit_tests
          if-no-files-found: error
          retention-days: 1
          overwrite: false

# Miniapps MFEM Serial with Sanitizers
# Miniapps tests MFEM Parallel with Sanitizers

# Split unit tests into separate files with:
# ./unit_tests --filenames-as-tags --list-tags|grep '\[#' | cut -d '[' -f 2 | cut -d']' -f1 > tests
# ./unit_tests --filenames-as-tags --input-file ./tests
# man-split:
#   runs-on: ubuntu-latest
#   name: Manual split
#   steps:
#     - name: Touch
#       run: man split

# upload-artifact
# https://github.com/marketplace/actions/upload-a-build-artifact
      # - name: Upload MFEM Build
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: mfem-build-${{inputs.sanitizer}}-${{inputs.mpi}}
      #     path: mfem/build
      #     retention-days: 1