name: all-in-one

inputs:
  CXXFLAGS:
    description: 'Additional CXX flags'
    default: ''
  LDFLAGS:
    description: 'Additional linker flags'
    default: ''
  key:
    description: 'Key for build, checks, examples, miniapps & tests caches'
    default: ''
  par:
    description: 'Whether to build for parallel (true/false)'
    default: false

on:
  workflow_call:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/mfem
        env:
          CXXFLAGS: ${{env.CXXFLAGS}} ${{inputs.CXXFLAGS}}
          LDFLAGS: ${{env.LDFLAGS}} ${{inputs.LDFLAGS}}
        with:
          key: build-${{inputs.key}}
          par: ${{inputs.par}}

  check:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: check
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: check-${{inputs.key}}
          cache-path: mfem/build/examples/ex1 # ex1p
          par: ${{inputs.par}}
      - name: MFEM Check
        if: ${{ steps.check.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v check

  examples:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: examples
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: examples-${{inputs.key}}
          cache-path: mfem/build/examples/ex1 # ex1p, could be set in donfig
          par: ${{inputs.par}}
      - name: Build Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v examples
      - name: Test Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ${{env.CTEST}} examples

  miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: miniapps
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: miniapps-${{inputs.key}}
          cache-path: mfem/build/miniapps/meshing/minimal-surface # (pminimal-surface)
          par: ${{inputs.par}}
      - name: Build Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v miniapps
      - name: Test Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ${{env.CTEST}} miniapps

  tests-miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          par: ${{inputs.par}}
      - name: Build Tests Unit Miniapps
        working-directory: mfem/build
        run: ninja -v tests/unit/all
      - name: Run Tests Unit Miniapps
        working-directory: mfem/build
        run: >
          ${{env.CTEST}} tests/unit 
          -E ${{ inputs.par == 'false' && '^unit_tests$|debug' || 'unit_tests|debug' }} 
          -R ${{ inputs.par == 'false' &&                   '' ||          '_cpu_np' }} 

  tests-build:  
    needs: [check]
    runs-on: ubuntu-latest
    env:
      unit_tests: ${{ inputs.par == 'false' && 'unit_tests' || 'punit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: restore
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: tests-${{inputs.key}}
          cache-path: mfem/build/tests/unit/${{env.unit_tests}}
          par: ${{inputs.par}}
      - name: Build Unit Tests
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v ${{env.unit_tests}}
      - name: Delete object files
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build/tests/unit
        run: find . -type f -name '*.o' -delete
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{inputs.key}}
          path: mfem/build/tests/unit/${{env.unit_tests}}
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  tests-run:
    needs: [tests-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [0, 1, 2, 3]
    name: tests-${{matrix.tag}}
    env:
      unit_tests: ${{ inputs.par == 'false' && 'unit_tests' || 'punit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          par: ${{inputs.par}}
      - name: Restore Unit Tests
        uses: actions/download-artifact@v4
        with:
          name: tests-${{inputs.key}}
          path: mfem/build/tests/unit
      - name: Split Unit Tests
        working-directory: mfem/build/tests/unit
        run: |
          chmod 755 ${{env.unit_tests}}
          ./${{env.unit_tests}} --list-test-names-only | tail -n +2 > list-test-names
          shuf list-test-names -o list-test-names
          split --verbose -n l/4 -d -a 1 list-test-names list-test-names-
      - name: Run Unit Tests ${{matrix.tag}}
        working-directory: mfem/build
        run: ${{env.CTEST}} tests/unit -R "${{env.unit_tests}}"

