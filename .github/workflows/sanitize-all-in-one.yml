name: all-in-one

on:
  workflow_call:
    inputs:
      sanitizer:
        description: 'Sanitizer to use (asan, msan, ubsan)'
        required: true
        default: asan
        type: string
      # key could be the concatenation of the sanitizer and the parallelism
      key:
        description: 'Key for build, checks, examples, miniapps & tests caches'
        required: true
        type: string
      par:
        description: 'Whether to build for parallel (true/false)'
        default: false
        type: boolean

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/mfem
        with:
          sanitizer: ${{inputs.sanitizer}}
          key: build-${{inputs.key}} # build-seq-asan, build-par-ubsan
          par: ${{inputs.par}}

  # ğŸ”¥ğŸ”¥ğŸ”¥ cache check in parallel ?
  check:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      ex: ${{ inputs.par && 'ex1p' || 'ex1' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: check
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: check-${{inputs.key}}
          cache-path: mfem/build/examples/${{env.ex}}
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: MFEM Check
        if: ${{ steps.check.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v check

  # ğŸ”¥ğŸ”¥ğŸ”¥ Could we compile only the parallel examples when parallel?
  # ğŸ”¥ğŸ”¥ğŸ”¥ We should filter out the "_ser" ones when parallel!
  examples:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: examples
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: examples-${{inputs.key}}
          cache-path: mfem/build/examples/ex1
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: Build Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v examples
      - name: Test Examples
        if: ${{ steps.examples.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ${{env.CTEST}} examples

  # ğŸ”¥ğŸ”¥ğŸ”¥ Could we compile only the parallel miniapps when parallel?
  # ğŸ”¥ğŸ”¥ğŸ”¥ We should filter out the "_ser" ones when parallel!
  miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: miniapps
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: miniapps-${{inputs.key}}
          cache-path: mfem/build/miniapps/meshing/minimal-surface # (pminimal-surface)
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: Build Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v miniapps
      - name: Test Miniapps
        if: ${{ steps.miniapps.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ${{env.CTEST}} miniapps

  tests-miniapps:
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: Build Tests Unit Miniapps
        working-directory: mfem/build
        run: ninja -v tests/unit/all
      - name: Run Tests Unit Miniapps (Serial)
        if: ${{ !inputs.par }}
        working-directory: mfem/build
        run: ${{env.CTEST}} tests/unit -E "^unit_tests$|debug"
      - name: Run Tests Unit Miniapps (Parallel)
        if: ${{ inputs.par }}
        working-directory: mfem/build
        run: ${{env.CTEST}} tests/unit -E "unit_tests|debug" -R "_cpu_np"

  tests-unit-build:
    needs: [check]
    runs-on: ubuntu-latest
    env:
      unit_tests: ${{ inputs.par && 'punit_tests' || 'unit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore
        id: restore
        uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          cache-key: tests-${{inputs.key}}
          cache-path: mfem/build/tests/unit/${{env.unit_tests}}
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: Build Unit Tests
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build
        run: ninja -v ${{env.unit_tests}}
      - name: Delete object files
        if: ${{ steps.restore.outputs.cache-hit != 'true' }}
        working-directory: mfem/build/tests/unit
        run: find . -type f -name '*.o' -delete
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{inputs.key}}
          path: mfem/build/tests/unit/${{env.unit_tests}}
          if-no-files-found: error
          retention-days: 1
          overwrite: false

  # ğŸ”¥ğŸ”¥ğŸ”¥ could dump the tests list before running
  tests-unit-run:
    needs: [tests-unit-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [0, 1, 2, 3]
    name: tests-unit-run-${{matrix.tag}}
    env:
      unit_tests: ${{ inputs.par && 'punit_tests' || 'unit_tests' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sanitize/restore
        with:
          build-key: build-${{inputs.key}}
          sanitizer: ${{inputs.sanitizer}}
          par: ${{inputs.par}}
      - name: Restore Unit Tests
        uses: actions/download-artifact@v4
        with:
          name: tests-${{inputs.key}}
          path: mfem/build/tests/unit
      - name: Split Unit Tests
        working-directory: mfem/build/tests/unit
        run: |
          chmod 755 ${{env.unit_tests}}
          ./${{env.unit_tests}} --list-test-names-only | tail -n +2 > list-test-names
          shuf list-test-names -o list-test-names
          split --verbose -n l/4 -d -a 1 list-test-names list-test-names-
      - name: Run Unit Tests ${{matrix.tag}}
        working-directory: mfem/build
        run: ${{env.CTEST}} tests/unit -R "${{env.unit_tests}}"

