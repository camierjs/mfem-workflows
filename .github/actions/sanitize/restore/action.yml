name: 'Restore state'
description: 'Restore state to be able to run checks, tests'

inputs:
  cache-key:
    description: 'Key for the cache/upload, can be left to none if not needed'
    default: none

  cache-path:
    description: 'path to what needs to be restored'
    default: none

  artifact-name:
    description: 'Name of the artifact to download'
    default: none

  artifact-path:
    description: 'path to what needs to be restored'
    default: mfem/build

  par:
    description: 'Whether to build for parallel (true/false)'
    default: false
    
outputs:
  cache-hit:
    description: 'Output from a specific step'
    value: ${{steps.debug.outputs.cache-hit}}

runs:
  using: 'composite'
  steps:
    - uses: ./.github/actions/sanitize/config
    - name: Cache
      if: ${{env.DEBUG == 'true' && inputs.cache-key != 'none'}}
      id: debug
      uses: actions/cache@v4
      with:
        path: ${{inputs.cache-path}}
        key: cache-${{inputs.cache-key}}

    - name: Setup
      if: ${{steps.debug.outputs.cache-hit != 'true'}}
      uses: ./.github/actions/sanitize/setup
      with:
        par: ${{inputs.par}}

    # - name: LLVM Restore
    #   if: ${{steps.debug.outputs.cache-hit != 'true'}}
    #   uses: actions/cache/restore@v4
    #   with:
    #     path: ${{env.LLVM_DIR}}
    #     fail-on-cache-miss: true
    #     key: cache-llvm-${{env.LLVM_VER}}-${{matrix.sanitizer}}
  
    # - name: MPI Setup
    #   if: ${{inputs.par == 'true' && steps.debug.outputs.cache-hit != 'true'}}
    #   uses: ./.github/actions/sanitize/mpi

    # - name: HYPRE Restore
    #   if: ${{inputs.par == 'true' && steps.debug.outputs.cache-hit != 'true'}}
    #   uses: actions/cache/restore@v4
    #   with:
    #     path: ${{env.HYPRE_DIR}}
    #     fail-on-cache-miss: true
    #     key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5
  
    # - name: METIS Restore
    #   if: ${{inputs.par == 'true' && steps.debug.outputs.cache-hit != 'true'}}
    #   uses: actions/cache/restore@v4
    #   with:
    #     path: ${{env.METIS_DIR}}
    #     fail-on-cache-miss: true
    #     key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5

    # - name: LSAN Restore
    #   if: ${{inputs.par == 'true' && steps.debug.outputs.cache-hit != 'true'}}
    #   uses: actions/cache/restore@v4
    #   with:
    #     path: ${{env.LSAN_DIR}}
    #     fail-on-cache-miss: true
    #     key: cache-lsan-suppression-file
  
    # - name: Hypre/Metis links
    #   if: ${{inputs.par == 'true' && steps.debug.outputs.cache-hit != 'true'}}
    #   run: ln -s -f ${{env.HYPRE_DIR}} hypre && ln -s -f ${{env.METIS_DIR}} metis-4.0
    #   shell: bash

    # - name: MFEM Checkout
    #   if: ${{steps.debug.outputs.cache-hit != 'true'}}
    #   uses: actions/checkout@v4
    #   with:
    #     path: mfem
    #     ref: ${{env.BRANCH}}
    #     repository: ${{env.REPOSITORY}}

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: upload-${{inputs.artifact-name}}
        path: ${{inputs.artifact-path}}

    - name: Ninja Patch
      working-directory: mfem/build
      run: |
        sed -i -e 's/CXX_STATIC_LIBRARY_LINKER__mfem_Release.*/CUSTOM_COMMAND/' build.ninja
        sed -i -e '/build tests\/unit\/all:/ s/tests\/unit\/[^ ]*unit_tests[^ ]*//g' build.ninja
        sed -i -e '/^add_test(\[=\[\(unit_tests\|punit_tests\)\]=\]/ s/)/ "--input-file .\/list-test-names-${{matrix.tag}}" "--min-duration 1")/' tests/unit/CTestTestfile.cmake
      shell: bash

    - name: Copy Data
      if: ${{steps.debug.outputs.cache-hit != 'true'}}
      working-directory: mfem/build
      run: |
        ninja cmake_object_order_depends_target_unit_tests
        cp -pR ../tests/unit/data tests/unit
      shell: bash
