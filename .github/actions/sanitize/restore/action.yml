name: 'Restore state'
description: 'Restore state to be able to run checks, tests'

inputs:
  par:
    description: 'Whether to build for parallel (true/false)'
    default: false
  sanitizer:
    description: 'Sanitizer to use (asan, msan, ubsan)'
    default: 'asan'
  cache-key:
    description: 'Key for the cache/upload, can be left to none if not needed'
    default: none
  cache-path:
    description: 'path to what needs to be restored'
    default: none
    
outputs:
  cache-hit:
    description: 'Output from a specific step'
    value: ${{steps.debug.outputs.cache-hit}}

runs:
  using: 'composite'
  steps:
    - uses: ./.github/actions/sanitize/config
    - name: Cache
      if: ${{env.DEBUG == 'true' && inputs.cache-key != 'none'}}
      id: debug
      uses: actions/cache@v4
      with:
        path: ${{inputs.cache-path}}
        key: cache-${{inputs.cache-key}}

    - name: Setup
      if: ${{steps.debug.outputs.cache-hit != 'true'}}
      uses: ./.github/actions/sanitize/setup
      with:
        par: ${{inputs.par}}
        sanitizer: ${{inputs.sanitizer}}

    - name: Download BUILD artifact
      uses: actions/download-artifact@v4
      with:
        name: build-${{inputs.par}}-${{inputs.sanitizer}}
        path: mfem/build

    - name: Ninja Patch
      working-directory: mfem/build
      run: |
        sed -i -e 's/CXX_STATIC_LIBRARY_LINKER__mfem_Release.*/CUSTOM_COMMAND/' build.ninja
        sed -i -e '/build tests\/unit\/all:/ s/tests\/unit\/[^ ]*unit_tests[^ ]*//g' build.ninja
        sed -i -e '/^add_test(\[=\[\(unit_tests\|punit_tests\)\]=\]/ s/)/ "--input-file .\/list-test-names-${{matrix.tag}}" "--min-duration 1")/' tests/unit/CTestTestfile.cmake
      shell: bash

    - name: Copy Data
      if: ${{steps.debug.outputs.cache-hit != 'true'}}
      working-directory: mfem/build
      run: |
        ninja cmake_object_order_depends_target_unit_tests
        cp -pR ../tests/unit/data tests/unit
      shell: bash
